/*
 * This build file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * user guide available at https://docs.gradle.org/3.5/userguide/java_library_plugin.html
 */
buildscript {

    ext {
        lombokVersion = "1.18.8"
        mapstructVersion = "1.2.0.Final"
    }

    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
    }

    dependencies {
        //This is necessary to use the gradle shadow plugin
        classpath 'com.github.jengelman.gradle.plugins:shadow:2.0.2'
        classpath 'org.ajoberstar:gradle-git:1.4.2'
    }
}

plugins {
    id 'net.ltgt.apt' version '0.10'
    id 'org.springframework.boot' version '2.1.4.RELEASE' apply false
}

apply plugin: 'io.spring.dependency-management'
dependencyManagement {
    imports {
        mavenBom org.springframework.boot.gradle.plugin.SpringBootPlugin.BOM_COORDINATES
    }
}


apply plugin: 'java-library'
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'maven-publish'
apply plugin: 'org.ajoberstar.grgit'

apply plugin: 'checkstyle'
checkstyle {
    toolVersion '8.10'
    configFile file("${rootProject.projectDir}/src/main/resources/checkstyle/checkstyle.xml")
    ignoreFailures = true
    maxWarnings = 0
}
checkstyleMain {
    source = 'src/main/java'
}

apply plugin: 'pmd'
pmd {
    toolVersion '5.6.1'
    pmdTest.enabled = false
    ruleSetFiles = files("${rootProject.projectDir}/src/main/resources/pmd/ruleset.xml")
    ignoreFailures = true
}

apply plugin: "jacoco"
jacoco {
    toolVersion = "0.8.2"
}
jacocoTestReport {
    reports {
        xml.enabled = false
        csv.enabled = false
        html.destination(file("$buildDir/reports/jacoco"))
    }
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

import org.ajoberstar.grgit.*

def repo = Grgit.open(dir: "${project.projectDir}/.")

// Get the branch name
def branchName = repo.branch.getCurrent().getName()
println 'Our branch name is: ' + branchName

//
// Explode out the elements of the branch name
// to determine the targetVersion
// Our formal branch name structure is:
// 
// {feature/bugfix}/targetVersion
//
def targetVersion = branchName.split('/').last()
println 'Our target version is: ' + targetVersion

group = 'com.pdgc.ccae'
version = targetVersion



// In this section you declare where to find the dependencies of your project
repositories {

    mavenLocal()
    mavenCentral()
    jcenter()

}

//------------------- Dependency management -------------------

dependencies {

    api 'com.zaxxer:HikariCP'
    api 'com.fasterxml.jackson.core:jackson-core'
    api 'com.sun.mail:javax.mail'
    api 'org.apache.logging.log4j:log4j-api'
    api 'org.apache.logging.log4j:log4j-core'
    api 'org.apache.logging.log4j:log4j-slf4j-impl'
    api 'com.fasterxml.jackson.core:jackson-annotations'
    api 'com.fasterxml.jackson.core:jackson-databind'
    api 'com.fasterxml.jackson.datatype:jackson-datatype-jdk8'
    api 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'
    api 'com.fasterxml.jackson.module:jackson-module-parameter-names'
    api 'org.jdom:jdom2'
    api 'org.json:json:20180130'
    api group: 'org.apache.commons', name: 'commons-collections4', version: '4.1'
    api 'org.javatuples:javatuples:1.2'
    api 'com.google.guava:guava:27.1-jre'
    api 'org.apache.commons:commons-lang3:3.5'
    api 'org.apache.commons:commons-text:1.6'
    api 'org.postgresql:postgresql'

    compileOnly "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor  "org.projectlombok:lombok:${lombokVersion}"


    testCompileOnly 'junit:junit'
    testRuntimeOnly 'org.junit.vintage:junit-vintage-engine'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
    testImplementation 'org.junit.jupiter:junit-jupiter-api'
    testImplementation 'org.junit.jupiter:junit-jupiter-params'
    testImplementation 'org.mockito:mockito-core'
    testImplementation 'org.mockito:mockito-junit-jupiter'
    testImplementation "org.assertj:assertj-core"
    testImplementation 'org.hamcrest:hamcrest-core'
    testImplementation 'org.hamcrest:hamcrest-library'
    
}

//------------------- Test -------------------

test {
    useJUnitPlatform {
        includeEngines 'junit-jupiter', 'junit-vintage'
        // excludeEngines 'junit-jupiter'
    }
}

check.dependsOn jacocoTestCoverageVerification

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                counter = 'INSTRUCTION'
                value = 'COVEREDRATIO'
                minimum = 0.44
            }
        }
    }
}

//------------------- Packaging -------------------

task sourcesJar(type: Jar) {
    from sourceSets.main.allJava
    classifier = 'sources'
}

task testJar(type: Jar) {
    dependsOn 'test'
    from sourceSets.test.allJava
    from sourceSets.test.output
}


jar {

    baseName = 'pdgc-ccae-commons'
    manifest {
        attributes('Built-By': System.getProperty('user.name'))
        attributes(['Specification-Title'     : 'pdgc-ccae-commons-project',
                    'Specification-Version'   : 1,
                    'Implementation-Title'    : project.name,
                    'Implementation-Version'  : 1,
                    'Implementation-Vendor'   : 'PDGC',
                    'Implementation-Timestamp': new Date().format("yyyy-MM-dd HH:mm:ssZ"),
                    'Git-Commit'              : repo.head().getAbbreviatedId(8),
                    'Git-Branch'              : repo.branch.getCurrent().getName()], 'common')
    }
    from sourceSets.main.output

}

shadowJar {
    baseName = 'pdgc-ccae-commons-all'
    classifier = null
    manifest {
        attributes('Built-By': System.getProperty('user.name'))
        attributes(['Specification-Title'     : 'pdgc-ccae-commons-project',
                    'Specification-Version'   : 1,
                    'Implementation-Title'    : project.name,
                    'Implementation-Version'  : 1,
                    'Implementation-Vendor'   : 'PDGC',
                    'Implementation-Timestamp': new Date().format("yyyy-MM-dd HH:mm:ssZ"),
                    'Git-Commit'              : repo.head().getAbbreviatedId(8),
                    'Git-Branch'              : repo.branch.getCurrent().getName()], 'common')
    }
    //
    // We want source for this one
    //

    from sourceSets.main.allSource
    from sourceSets.test.output    // We need this for cross project JUnit Tests

}


//------------------- Publishing -------------------
publishing {
    publications {

        testArtifact(MavenPublication) {
            groupId = group
            artifactId = 'ccae-commons-test'
            version = version
            artifact testJar
            pom {
                packaging = "jar"
            }
        }

        skinny(MavenPublication) {
            from components.java
            groupId group
            artifactId 'ccae-commons'
            version version
            artifact sourcesJar
        }

        fat(MavenPublication) {
            groupId group
            artifactId 'pdgc-ccae-commons-all'
            version version
            artifact shadowJar
        }

    }

}


task pdgcPackager(type: GradleBuild) {
    tasks = ['clean', 'build', 'shadowJar', 'publishToMavenLocal']
}
