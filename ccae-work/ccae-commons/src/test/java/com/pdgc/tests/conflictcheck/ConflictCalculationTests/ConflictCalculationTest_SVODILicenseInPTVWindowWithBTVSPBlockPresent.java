package com.pdgc.tests.conflictcheck.ConflictCalculationTests;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import org.junit.Test;

import com.pdgc.conflictcheck.structures.TestConflict;
import com.pdgc.conflictcheck.structures.TestConflictKey;
import com.pdgc.conflictcheck.structures.builders.TestConflictSourceGroupKeyBuilder;
import com.pdgc.conflictcheck.structures.component.override.ConflictOverride;
import com.pdgc.general.structures.Term;
import com.pdgc.general.structures.TestRightType;
import com.pdgc.general.structures.container.impl.MTL;
import com.pdgc.general.structures.container.impl.PMTL;
import com.pdgc.general.structures.container.impl.TerrLang;
import com.pdgc.general.structures.rightsource.TestRightSourceType;
import com.pdgc.general.structures.rightsource.impl.TestDealSource;
import com.pdgc.general.structures.rightsource.impl.TestSalesPlanSource;
import com.pdgc.general.structures.rightstrand.impl.DealRightStrand;
import com.pdgc.general.structures.rightstrand.impl.RightStrand;
import com.pdgc.general.structures.rightstrand.impl.SalesPlanRightStrand;
import com.pdgc.general.structures.rightstrand.impl.TestDealStrand;
import com.pdgc.general.structures.rightstrand.impl.TestDistributionStrand;
import com.pdgc.general.structures.rightstrand.impl.TestSalesPlanStrand;
import com.pdgc.general.util.DateTimeUtil;

public class ConflictCalculationTest_SVODILicenseInPTVWindowWithBTVSPBlockPresent extends ConflictCalculationTest {
	/**
	 * This test should create a conflict for an SVODI license in a PTV sales window
	 * where there is a block against SVOD.
	 * Period of the conflict is 1/1/2017 - 12/31/2017.
	 */
	@Test
	public void SVODILicenseInPTVWindowWithBTVSPBlockPresentTest() {
		long dealId = 4;
		String dealRightSourceDetailId = "7741802";
		long salesWindowId = 100;

		// SVOD-I license
		TestDealStrand tempRightStrand = new TestDealStrand(simpleEpisodeLicense);
		tempRightStrand.setRightStrandId(1l);
		tempRightStrand.setRightSource(new TestDealSource(TestRightSourceType.DEAL, dealId, dealRightSourceDetailId));
		tempRightStrand.setMTL(new MTL(svodi, canada, english));
		tempRightStrand.setActualMTL(new MTL(svodi, canada, english));
		tempRightStrand.setTerrLang(new TerrLang(canada, english));
		tempRightStrand.setActualTerrLang(new TerrLang(canada, english));
		tempRightStrand.setRightType(TestRightType.EXCLUSIVE_LICENSE);
		tempRightStrand.setTerm(new Term(DateTimeUtil.createDate(2017, 1, 1), DateTimeUtil.createDate(2018, 12, 31)));
		tempRightStrand.setOrigTerm(new Term(DateTimeUtil.createDate(2017, 1, 1), DateTimeUtil.createDate(2018, 12, 31)));
		DealRightStrand license = tempRightStrand;

		// Pay TV Sales Window
		TestSalesPlanStrand tempSalesRightStrand = new TestSalesPlanStrand(seasonSalesWindowStrand);
		tempSalesRightStrand.setRightStrandId(2l);
		tempSalesRightStrand.setRightSource(new TestSalesPlanSource(TestRightSourceType.SALESPLAN, salesWindowId));
		tempSalesRightStrand.setMTL(new MTL(ptv, canada, english));
		tempSalesRightStrand.setActualMTL(new MTL(ptv, canada, english));
		tempSalesRightStrand.setTerrLang(new TerrLang(canada, english));
		tempSalesRightStrand.setActualTerrLang(new TerrLang(canada, english));
		tempSalesRightStrand.setRightType(TestRightType.SALES_PLAN_WINDOW);
		tempSalesRightStrand.setTerm(new Term(DateTimeUtil.createDate(2017, 1, 1), DateTimeUtil.createDate(2017, 12, 31)));
		tempSalesRightStrand.setOrigTerm(new Term(DateTimeUtil.createDate(2017, 1, 1), DateTimeUtil.createDate(2017, 12, 31)));
		SalesPlanRightStrand sp = tempSalesRightStrand;

		// SVOD SP Block generated by PTV Sales Window
		tempSalesRightStrand = new TestSalesPlanStrand(seasonSalesWindowBlockStrand);
		tempSalesRightStrand.setRightStrandId(4l);
		tempSalesRightStrand.setRightSource(new TestSalesPlanSource(TestRightSourceType.SALESPLAN, salesWindowId));
		tempSalesRightStrand.setMTL(new MTL(svod, canada, english));
		tempSalesRightStrand.setActualMTL(new MTL(svod, canada, english));
		tempSalesRightStrand.setTerrLang(new TerrLang(canada, english));
		tempSalesRightStrand.setActualTerrLang(new TerrLang(canada, english));
		tempSalesRightStrand.setRightType(TestRightType.SALES_PLAN_BLOCK);
		tempSalesRightStrand.setTerm(new Term(DateTimeUtil.createDate(2017, 1, 1), DateTimeUtil.createDate(2017, 12, 31)));
		tempSalesRightStrand.setOrigTerm(new Term(DateTimeUtil.createDate(2017, 1, 1), DateTimeUtil.createDate(2017, 12, 31)));
		SalesPlanRightStrand spBlockPerp = tempSalesRightStrand;

		TestDistributionStrand distrRights = new TestDistributionStrand(seriesDistributionRights);
		distrRights.setMedia(allMedia);
		distrRights.setActualMedia(allMedia);
		
		List<RightStrand> primaryRightStrands = Arrays.asList(license);
		List<RightStrand> conflictingRightStrands = Arrays.asList(sp, spBlockPerp, distrRights);
		List<ConflictOverride> existingOverrides = new ArrayList<>();
		
		Set<TestConflict> primaryLeafConflicts = new HashSet<>();
		Set<TestConflict> siblingLeafConflicts = new HashSet<>();
		
		runConflictCheck(
			conflictCalculator,
			conflictCheckRunner,
			primaryRightStrands,
			conflictingRightStrands,
			existingOverrides,
			true,
			primaryLeafConflicts,
			siblingLeafConflicts
		);		

		assertEquals(1, getNumConflictsIgnorePMTL(primaryLeafConflicts));
		assertTrue(containsConflict(
			primaryLeafConflicts,
			new TestConflictKey(
				conflictMatrix.getConflictType(license, spBlockPerp),
				TestConflictSourceGroupKeyBuilder.getConflictSourceGroupKey(license),
				TestConflictSourceGroupKeyBuilder.getConflictSourceGroupKey(spBlockPerp),
				new PMTL(simpleEpisodeLicense.getPMTL().getProduct(), svodi, canada, english),
				new Term(DateTimeUtil.createDate(2017, 1, 1), DateTimeUtil.createDate(2017, 12, 31)),
				license.getTimePeriod()
			),
			productHierarchy, 
			mediaHierarchy, 
			territoryHierarchy, 
			languageHierarchy
		));
		
		assertEquals(0, getNumConflictsIgnorePMTL(siblingLeafConflicts));
	}
}
